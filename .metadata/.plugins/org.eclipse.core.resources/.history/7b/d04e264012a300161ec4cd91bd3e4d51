package algorithms.sorting;

public class Sort {
	public static void mergeSort(int[] nums) {
		mergeSort(nums, 0, nums.length-1); //[2,1] (nums, 0,1)
	}
	private static void mergeSort(int[] nums, int left, int right) {
		int len = 	right - left + 1;
		if (len<2) return;

		//divide and merge
		int mid = left+len/2;
		mergeSort(nums, left, mid-1);
		mergeSort(nums, mid, right);
		//merge phase [2,1] ==> [2] [1]
		int[] marr = new int[len];
		int i=left, j= mid, idx=0;
		while (i<mid && j<=right) {
			if (nums[i]<nums[j]) marr[idx++] = nums[i++];
			else marr[idx++] = nums[j++];
		}
		while(i<mid) marr[idx++] = nums[i++];
		while(j<=right) marr[idx++] = nums[j++];
		//copy it back from left to right
		for (int k=0; k<marr.length; k++) {
			nums[left+k] = marr[k];
		}
	}
	
	/*
	 * 3,2,1
	 * 
	 * pivot=3, i=1, j=2
	 * while(i<j)
	 * 		#1 loop: i=3, j=2, no swap for i,j, exit loop
	 * swap l=0 and j=2 
	 * [1,2,3]
	 */
	public static void quickSort(int[] nums) {
		quickSort(nums, 0, nums.length-1);
	}
	
	private static void quickSort(int[] nums, int l, int r) {
		int len = r-l+1;
		if (len<2) return;
		//at least two elements
		int pivot = nums[l]; //[2,1] or [2,1,3] swap inwards around pivot
		int i= l+1, j=r;
		while (i<j) {
			while (i<=r && nums[i]<=pivot) i++; //[3,2,1]
			while (j>=l && nums[j]>=pivot) j--;
			if (i<j) swap(nums, i, j); //swap nums[i] and nums[j]
		}
		swap(nums,l,j); //swap pivot with nums[j], pivot stores at j
		quickSort(nums, l, j-1);
		quickSort(nums, j+1, r);
	}
	private static void swap(int[] nums, int i, int j) {
		int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp;
	}
}
