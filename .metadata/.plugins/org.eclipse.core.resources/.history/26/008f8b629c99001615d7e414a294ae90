package algorithms.Trie;
//assume the trie handles 26 lower cases chars only
class TrieNode {
	boolean isLeaf;
	TrieNode[] arr;
	
	public TrieNode() {arr = new TrieNode[26];}
}
/**
 * Trie common methods:
 * insert(String word): inser the word into the trie
 * boolean search(String word): return true if it is a valid word
 * TrieNode searchNode(String s): return the node if s shows up in the tree (may not be a valid word); null otherwise
 * boolean startWith(String prefix): returns true if prefix shows up in the tree
 * 
 * @author xuerong.tang
 *
 */
public class ArrayTrie {
	TrieNode root;

	public ArrayTrie() {
		root = new TrieNode();
	}
	
	public void insert(String word) {
		TrieNode cur = root;
		for (int i=0; i< word.length(); i++) {
			char c = word.charAt(i);
			int idx = c-'a';
			if (cur.arr[idx] == null) {
				cur.arr[idx] = new TrieNode();
			}
			cur = cur.arr[idx];
		}
		cur.isLeaf = true;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
