package algorithms.trees;

import java.util.Stack;

public class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	
	public TreeNode(int val) {
		this.val = val;
	}

	public static void visit(TreeNode n) {System.out.print(n.val+",");}
	public static void preTraversal(TreeNode root) {
		Stack<TreeNode> s = new Stack<TreeNode>();
		s.push(root);
		while (!s.empty()) {
			//pop and visit top
			TreeNode cur = s.pop();
			visit(cur);
			//push right and then left, so that left will be visit first next time
			if (cur.right != null) s.push(cur.right);
			if (cur.left != null) s.push(cur.left);
		}
	}
	public static void main(String[] args) {
		TreeNode node = new TreeNode(10);
		node.left = new TreeNode(5);
		node.right = new TreeNode(15);
		TreeNode.preTraversal(node);

	}

}
